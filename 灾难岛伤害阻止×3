-- 灾害伤害防护脚本
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- 全局变量存储状态
_G.DisasterDamageProtection = _G.DisasterDamageProtection or {
    enabled = false,
    originalFireServer = nil,
    hookedEvents = {},
    originalNamecall = nil
}

local protectionData = _G.DisasterDamageProtection

-- 显示通知
local function showNotification(enabled)
    local status = enabled and "开启，再次执行关闭" or "关闭，再次执行开启"
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "酸雨暴风雪摔落伤害阻止",
        Text = "状态: " .. status,
        Duration = 5,
        Icon = "rbxassetid://6728855517"
    })
    print("灾害伤害防护已" .. status)
end

-- 功能函数：启用防护
local function enableProtection()
    protectionData.enabled = true

    -- 保存原函数
    protectionData.originalFireServer = protectionData.originalFireServer or getrenv().fireServer

    -- 拦截网络事件
    local Network = game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network")

    -- 钩子函数
    local hookFunction = function(self, ...)
        if not protectionData.enabled then
            return protectionData.originalFireServer(self, ...)
        end

        local args = {...}
        local eventName = tostring(self)

        -- 阻止所有灾害伤害相关事件
        local blockedEvents = {
            "2d127417-9505-4a12-9d4c-511b295c7d76",  -- 洪水伤害事件ID
            "ebd07b96-ffb4-460e-8bbc-011e9015cbd7",  -- 酸雨伤害事件ID
            "a21cc57b-e4cc-4f0d-8255-8360b2b565b2",   -- 暴风雪伤害事件ID
            "1a100048-de54-45fd-9d34-2ef2b9a9dc53"   -- 新添加的灾害伤害事件ID
        }

        for _, blocked in ipairs(blockedEvents) do
            if eventName == blocked then
                local damageValue = args[1] or "未知"
                local disasterType = "未知灾害"
                
                -- 根据事件ID识别灾害类型
                if eventName == "2d127417-9505-4a12-9d4c-511b295c7d76" then
                    disasterType = "洪水"
                elseif eventName == "ebd07b96-ffb4-460e-8bbc-011e9015cbd7" then
                    disasterType = "酸雨"
                elseif eventName == "a21cc57b-e4cc-4f0d-8255-8360b2b565b2" then
                    disasterType = "暴风雪"
                elseif eventName == "1a100048-de54-45fd-9d34-2ef2b9a9dc53" then
                    disasterType = "未知灾害"
                end
                
                print("拦截" .. disasterType .. "伤害事件: " .. eventName)
                print("伤害数值: " .. tostring(damageValue))
                
                -- 显示灾害伤害警告
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = disasterType .. "伤害已拦截",
                    Text = "伤害值: " .. tostring(damageValue),
                    Duration = 3,
                    Icon = "rbxassetid://6728855517"
                })
                
                return nil  -- 阻止伤害
            end
        end

        -- 对于非伤害事件，确保正常调用原始函数
        return protectionData.originalFireServer(self, ...)
    end

    -- 应用钩子
    if not protectionData.hookedEvents[Network] then
        protectionData.hookedEvents[Network] = true
        
        -- 保存原始元表
        local mt = getrawmetatable(Network)
        if mt then
            if not protectionData.originalNamecall then
                protectionData.originalNamecall = mt.__namecall
            end

            if setreadonly then 
                setreadonly(mt, false) 
            end

            mt.__namecall = newcclosure(function(self, ...)
                local method = getnamecallmethod()
                if method == "FireServer" then
                    local result = hookFunction(self, ...)
                    -- 确保不会返回nil给游戏系统
                    if result == nil then
                        -- 对于被拦截的事件，返回一个空函数而不是nil
                        return function() end
                    end
                    return result
                end
                return protectionData.originalNamecall(self, ...)
            end)

            if setreadonly then 
                setreadonly(mt, true) 
            end
        end
    end

    showNotification(true)
end

-- 功能函数：禁用防护
local function disableProtection()
    protectionData.enabled = false

    -- 恢复原来的元表
    local Network = game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network")
    if protectionData.hookedEvents[Network] and protectionData.originalNamecall then
        local mt = getrawmetatable(Network)
        if mt then
            if setreadonly then 
                setreadonly(mt, false) 
            end
            
            -- 确保恢复正确的元表
            mt.__namecall = protectionData.originalNamecall
            
            if setreadonly then 
                setreadonly(mt, true) 
            end
        end
        
        protectionData.hookedEvents[Network] = false
    end

    showNotification(false)
end

-- 切换防护状态
local function toggleProtection()
    if protectionData.enabled then
        disableProtection()
    else
        enableProtection()
    end
end

-- 执行切换
toggleProtection()

-- 返回当前状态供外部使用
return {
    toggle = toggleProtection,
    isEnabled = function() return protectionData.enabled end
}